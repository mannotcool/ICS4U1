package vehicles;

/**
 * This class is the base for all types of vehicles to be simulated.
 * 
 * @author Nick Stoyanov
 * @version Oct 26, 2025
 */
public abstract class Vehicle {
    private double speed = 0;
    private double maxCapableSpeed = 0;

    private int racePositionPercentage = 0;
    private int acceleration = 0;
    private int weight = 0;

    /**
     * Defines and creates a vehicle with a base maxSpeed, base acceleration and weight.
     * 
     * @param speed Current Vehicle Speed
     * @param maxCapableSpeed Maximum Possible Vehicle Speed
     * @param acceleration Vehicle Acceleration
     * @param weight Vehicle Weight
     * @param racePosition Percentage of race completed
     */
    public Vehicle(double speed, double maxCapableSpeed, int acceleration, int weight, int racePositionPercentage) {
        setSpeed(speed);
        setMaxCapableSpeed(maxCapableSpeed);
        setAcceleration(acceleration);
        setWeight(weight);
        setRacePositionPercentage(racePositionPercentage);
    }

    /**
     * No argument constructor for vehicle.
     */
    public Vehicle() {
        this.speed = 0;
        this.maxCapableSpeed = 0;
        this.acceleration = 0;
        this.weight = 0;
        this.racePositionPercentage = 0;
    }

    /**
     * Accessor method to access the general speed of a vehicle object.
     * @return vehicle speed
     */
    public double getSpeed() {
        return speed;
    }

    /**
     * Accessor method to get the maximum possible speed of a vehicle object.
     * @return max vehicle speed
     */
    public double getMaxCapableSpeed() {
        return maxCapableSpeed;
    }

    /**
     * Accessor method to access the percentage of the race completed by a vehicle object.
     * @return current position in race as a percentage
     */
    public int getRacePositionPercentage() {
        return racePositionPercentage;
    }

    /**
     * Accessor method to access acceleration speed of a vehicle object.
     * @return vehicle acceleration
     */
    public int getAcceleration() {
        return acceleration;
    }

    /**
     * Accessor method to get the weight of a vehicle object.
     * @return vehicle weight
     */
    public int getVehicleWeight() {
        return weight;
    }

    /**
     * Mutator method to validate and set the vehicle speed (assumed in kmh). The new vehicle speed can not
     * be a negative value, and must be within the confines of the maximum vehicle speed. There are no
     * error messages due to how this method may be used frequently during calculations, and the potential for negative numbers
     * from those calculations.
     * 
     * @param newSpeed Vehicle Speed
     */
    public void setSpeed (double newSpeed) {
        if (newSpeed < 0) {
            speed = 10; // minimum speed is 10 km/h  
        } else {
            if (newSpeed > maxCapableSpeed) {
                speed = maxCapableSpeed;
            } else {
                speed = newSpeed;
            }
        }
    }

    /**
     * Mutator method to validate and set the maximum speed of a vehicle object (assumed in kmh).
     * The maximum speed always be the same or more than the current vehicle speed.
     * 
     * @param newMaxSpeed Max Vehicle Speed
     */
    public void setMaxCapableSpeed (double newMaxCapableSpeed) {
        if (newMaxCapableSpeed < speed) {
            System.err.println("Maximum Vehicle Speed must be the same or more than current vehicle speed. No values have been changed.");
        } else {
            maxCapableSpeed = newMaxCapableSpeed;
        }
    }


    /**
     * Mutator method to validate and set newRacePositionPercentage of a vehicle object. The variable
     * describes a position in a race, proportionate to the distance of a track.
     * 
     * @param newRacePositionPercentage Race Position Percentage as an integer
     */
    public void setRacePositionPercentage (int newRacePositionPercentage) {
        if (newRacePositionPercentage < 0 || newRacePositionPercentage > 100) {
            System.err.println("newRacePositionPercentage must be between 0-100. No values have been changed.");
        } else {
            racePositionPercentage = newRacePositionPercentage;
        }
    }

    /**
     * Mutator method to validate and set the acceleration of a vehicle object (assumed in kmh). Vehicles can not accelerate
     * faster than they can physically travel. 
     * 
     * @param newAcceleration Vehicle Acceleration
     */
    public void setAcceleration (int newAcceleration) {
        if (newAcceleration < 0) {
            System.err.println("newAcceleration must be greater than 0. Defaulting to 0...");
            acceleration = 0;
        } else {
            if (newAcceleration > maxCapableSpeed) {
                System.err.println("newAcceleration must be equal or less than maxCapableSpeed. Defaulting to the value of maxCapableSpeed...");
                acceleration = (int)maxCapableSpeed;
            } else {
                acceleration = newAcceleration;
            }
        }
    }

    /**
     * Mutator method to validate and set the weight of a vehicle object (assumed in lbs).
     * 
     * @param newWeight Vehicle Weight
     */
    public void setWeight(int newWeight) {
        if (newWeight < 0) {
            System.err.println("newWeight must be greater than 0. Defaulting to 0...");
            weight = 0;
        } else {
            weight = newWeight;
        }
    }

    /**
     * Method to simulate slowing down a vehicle by a certain percentage.
     * @param percentage percentage to slow down by
     */
    public void slowDownByPercentage(int percentage) {
        if (percentage < 0 || percentage > 100) {
            System.err.println("Percentage must be between 0-100. No values have been changed.");
        } else {
            double speedReduction = (percentage / 100.0) * speed;
            setSpeed(speed - speedReduction);
        }
    }
    
    /**
     * Method to calculate a hypothetical vehicle while still considering the weight of the vehicle.
     * Due to how objects can be either <b>land</b> or <b>air</b>, subclasses should use their own formulas for
     * accurately calculating a speed.
     * 
     * @param speed Vehicle Speed
     * @param weight Vehicle Weight
     * @param acceleration Vehicle Acceleration
     */
    public abstract double calcSpeed(double speed, int weight, int acceleration);

    /**
     * In the event of bad weather, this method simulates the effect on the vehicle's performance.
     * The default implementation does nothing as different vehicle types may have different reactions to bad weather.
     */
    public abstract void weatherDebuff();

    /**
     * Method to print a summary of the vehicle statistics.
     * @return various vehicle statistics including race position and speed.
     */
    public String toString() {
        return "Completed " + getRacePositionPercentage() + "% of the race, traveling at " + getSpeed() + "km/h.";
    }
}
